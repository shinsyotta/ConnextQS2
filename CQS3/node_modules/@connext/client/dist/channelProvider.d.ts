import { CFChannelProviderOptions, ChannelProviderConfig, ChannelProviderRpcMethod, RpcConnection, Store, StorePair } from "./types";
export declare const createCFChannelProvider: ({ ethProvider, keyGen, lockService, messaging, networkContext, nodeConfig, nodeUrl, store, xpub, }: CFChannelProviderOptions) => Promise<ChannelProvider>;
export declare class ChannelProvider {
    private connection;
    private store;
    private wallet;
    private _config;
    private _multisigAddress;
    private _signerAddress;
    constructor(connection: RpcConnection, config: ChannelProviderConfig, store: Store, authKey: any);
    enable: () => Promise<ChannelProviderConfig>;
    send: (method: ChannelProviderRpcMethod, params?: any) => Promise<any>;
    readonly isSigner: boolean;
    readonly config: ChannelProviderConfig;
    multisigAddress: string | undefined;
    signerAddress: string;
    on: (event: string, listener: (...args: any[]) => void) => any;
    once: (event: string, listener: (...args: any[]) => void) => any;
    signMessage: (message: string) => Promise<string>;
    get: (path: string) => Promise<any>;
    set: (pairs: StorePair[], allowDelete?: Boolean) => Promise<void>;
    restore: () => Promise<StorePair[]>;
    reset: () => Promise<void>;
    restoreState: (path: string) => Promise<void>;
    private _send;
}
//# sourceMappingURL=channelProvider.d.ts.map